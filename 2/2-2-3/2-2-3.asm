;Воропаева Алина, группа П-402
;Практическая работа №2
;Вариант №2-2-3
;Задание: С клавиатуры вводится последовательность натуральных чисел (не больших 65535), оканчивающаяся нулём. 
;Найдите сумму чисел Фибоначчи с номерами - элементами данной последовательности.
format mz
beginProg:
	mov ax,cs
	mov ds,ax
	mov ah,09h			;Функция вывода строки на экран
	mov dx,str1			;Строка с заданием
	int 21h				;Вывод строки приглашения

	xor cx,cx	
	xor dx,dx	
	xor di,di
	mov	bp,10d			;Для дальнейшего умножения на 10 (для перевода в десятичную систему счисления)
	mov word[buffer],0	;По этому адресу будет храниться сумма элементов
	
inputChar:	
	mov ah,08h			;Функция чтения символа с клавиатуры
	int 21h				;Читаем символ; считанный  сохраняется в AL
	cmp al,'0'			;Сравнение введенного символа и символа '0'
	jb inputCharService	;Если код введенного символа меньше кода цифры '0' (т.е. служебный символ), то перейти на 
						;inputCharService (для проверки нажатия Enter'а)
	
	cmp al,'9'			;Сравнение введенного символа и символа '9'
	ja inputChar		;Если код введенного симовла больше кода цифры '9' (т.е. не служебный символ и не цифра), то 
						;перейти на inputChar (для повторного чтения с клавиатуры)
	
	;Иначе (если нажатый символ является цифрой)
	mov bl,al			;Сохраним символ в BL
	mov ax,di			;Поместим в AX уже считанную часть числа, хранящуюся в DI
	mul bp				;Умножаем содержимое регистра AX на 10 (для увеличения числа на еще 1 разряд); DX:AX = AX * BP
	
	cmp dx,0			;Сравнение содержимого регистра DX с 0
	jne inputChar		;Если DX <> 0, значит было переполнение (введенное значение больше, чем может 	
						;поместить в одном 16-разрядном регистре (65 535) ), то перейти на inputChar (для 
						;повторного чтения с клавиатуры)
	
	;Иначе (если переполнения не произошло)
	mov dl,bl			;Поместить в младшую часть DX считанный c клавиатуры символ
	
	sub dl,'0'			;Преобразование считанного символа в цифру
	xor dh,dh			;Обнуление старшей части DX (теперь в DX хранится только введенная цифра; нужно для 
						;дальнейшего сложения с AX (в котором хранится уже считанное число))
	
	add dx,ax			;Суммируем введенную с клавиатуры цифру с уже считанной частью числа
	jc inputChar  	    ;Если было переполнение (введенное значение больше, чем может поместить 
						;в одном 16-разрядном регистре (65 535) ), то перейти на inputChar (для повторного чтения с 
						;клавиатуры)
	
	mov di,dx			;Поместить в DI считанное число
	
	mov dl,bl			;Поместить в DL введенный с клавиатуры символ (нужно для функции вывода 02h прерывания 		
						;int21h)
	mov ah,02h			;Функция вывода символа
	int 21h				;Вывод считанного символа
	
	jmp inputChar		;Перейти на inputChar для чтения с клавиатуры

inputCharService:			
	cmp al,13			;Проверка: была ли нажатая клавиша Enter'ом
	je numberProcessingBegin	;Если был нажат Enter, то переход на метку numberProcessingBegin для обработки 
								;введенного числа

	jmp inputChar		;Если был нажат не Enter, то продолжить чтение с клавиатуры

;Обработка введенного числа	
numberProcessingBegin:
	cmp di,0			;Если введен 0, то выход
	je outputAnswer
	
	mov	ah,2h			;Переход на новую строчку
	mov	dl,13
	int	21h
	
	mov	dl,10
	int	21h	
	
	cmp di,1			;Сравнение введенного числа с 1
	je firstElement		;Если веденное число равно 1 (первый элемент)
	
	jmp findFibElement	;Иначе (если введенный номер элемента больше 1), то перейти на метку findFibElement (для
						;нахождения числа фибонначи с данным номером)		
numberProcessingEnd:
	xor dx,dx	
	xor di,di

	jmp inputChar	

;Если введен номер первого элемента, то надо прибавить 1
firstElement:
	add word[buffer],1
	jmp numberProcessingEnd
	
;Поиск числа последовательности с данным номером
findFibElement:
	mov ax,1			;Первый элемент последовательности
	mov bx,1			;Вторую элемент последовательности
	mov cx,di			;Заносим в CX введенный номер элемента последовательности
	sub cx,1			;Вычитаем из CX единицы (так как первым элементом является второе число Фиббоначи)
						;Не очень понятно написала...
;Начало цикла, который находит число Фибоначчи с номером, хранящимся в регистре CX
startLoop:
	add ax,bx			;Сложение предпоследнего и последнего члена последовательности; результат (т.е. найдженный 
						;член последовательности) сохраняется в AX
	xchg ax,bx			;Обмен значениями
	loop startLoop		;Пока CX не будет равен 0, то продолжать необходимого поиск члена последовательности
	add word[buffer],ax	;После того, как необходимый элемент найден, прибавить его к области памяти, где
						;хранится сумма
	jmp numberProcessingEnd	;Перейти на numberProcessingEnd (для продолжения ввода чисел)
	
outputAnswer:
	push word[buffer]	;Помещение в стек результа, что бы потом можно было восстановить
	
	;Переход на новую строку
	mov ah,2h			;Функция вывода символа
	mov dl,13		
	int 21h
	
	mov dl,10		
	int 21h			
	
	;Вывод строки 'Ответ: '
	mov ah,09h			;Функция вывода строки
	mov dx,str2			;В DX помещаем строку для вывода 'Ответ: '
	int 21h
	
	pop ax				;Извлекаем из стека в AX найденный результат
	push -1				;Помещаем с стек значение -1 для созранения признака конца числа

	mov bp,10d			;Для дальнейшего деления на 10 (для перевода в десятичную систему счисления)

;Сохранение в памяти числа (по одной цифре)
keepNumber:	
	xor dx,dx			;Обнуление регистра DX
	div bp				;Деление на 10. DX:AX/BP в AX -- целое, в DX -- остаток
	push dx				;Поместим остаток от деления в стек (что бы потом цифру можно было извлечь и вывести на экран)
	cmp ax,0			;Проверка: является ли целое от деления нулем (оптимальнее or ax,ax)
	jne keepNumber		;Если да, то достигнут конец числа
	mov ah,2h			;Функция вывода символа

;Вывод числа из памяти (по одной цифре)
outputNumber:	
	pop dx				;Восстановим цифру из стека (т.к извлекается из стека, то число выводится с первой цифры)
	cmp dx,-1			;Сравнение извлеченного числа с -1					
	je endProg			;Если равно , значит достигнут конец и надо перейти на метку endProg (для выхода из
						;программы){оптимальнее: or dx,dx jl endProg}
	add dl,'0'			;Преобразование извлеченной цифры в символ
	int 21h				;Вывод символа на экран
	jmp outputNumber	;Перейти на метку outputNumber для вывода дальнейших символов

	
endProg:    
	mov	ah,02h			;Перейдем на новую строчку
	mov	dl,13
	int	21h
	
	mov	dl,10
	int	21h	

	mov ah,09h			;Функция вывода строки на экран
	mov dx,str3			;Строка 'Нажмите любую клавишу...'
	int 21h				;Вывод строки
	
	mov ah,8h			;Функция чтения с клавиатуры (для реализации паузы, чтобы программа сразу не закрывалась)
	int 21h
	
	mov ax,4c00h		;Функция выхода
	int 21h				;Выход
	
str1	db	'С клавиатуры вводится последовательность натуральных чисел (не больших 65535), оканчивающаяся нулём.', 			10,13, 'Найдите сумму чисел Фибоначчи с номерами - элементами данной последовательности.',10,13
		db	'Введите число: $'
str2	db	'Ответ: $'
str3	db 'Нажмите любую клавишу...$'
buffer	db 9 			;Смещение для хранения чисел